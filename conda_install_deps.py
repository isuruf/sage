import os
import subprocess
from sys import platform

sage_root = os.path.dirname(os.path.realpath(__file__))
sage_local = os.path.join(sage_root, "local")
pkg_dir=os.path.join(sage_root, "build/pkgs")

conda_pkgs = {
'alabaster' : 'alabaster',
'arb' : 'arb',
'autotools' : 'automake libtool',
'babel' : 'babel',
'backports_abc' : 'backports_abc',
'backports_shutil_get_terminal_size' : 'backports.shutil_get_terminal_size',
'backports_ssl_match_hostname' : 'ssl_match_hostname',
'boost_cropped' : 'boost-cpp',
'brial':'brial',
'bzip2' : 'bzip2',
'cddlib':'cddlib',
'cliquer':'cliquer',
'combinatorial_designs':'sagemath-db-combinatorial-designs',
'configparser' : 'configparser',
#'conway_polynomials':'sagemath-db-conway-polynomials',
'cvxopt' : 'cvxopt',
'cycler' : 'cycler',
'cysignals' : 'cysignals',
'cython' : 'cython',
'dateutil' : 'dateutil',
'decorator' : 'decorator',
'docutils' : 'docutils',
'ecl':'ecl',
'eclib':'eclib',
'ecm' : 'ecm',
'elliptic_curves':'sagemath-db-elliptic-curves',
'entrypoints' : 'entrypoints',
'enum34' : 'enum34',
'fflas_ffpack':'fflas-ffpack',
'flask_babel' : 'flask-babel',
'flask' : 'flask',
'flask_openid' : 'flask-openid',
'flint' : 'libflint',
'flintqs':'flintqs',
'fpylll':'fpylll',
'freetype' : 'freetype',
'functools32' : 'functools32',
'future' : 'future',
'gap':'gap=4.8.3',
'gc' : 'bdw-gc',
'gcc' : 'gcc',
'gf2x':'gf2x',
'gfan':'gfan',
'giac' : 'giac',
'git' : 'git',
'givaro':'givaro',
'glpk' : 'glpk',
'gmp' : 'gmp',
'graphs': 'sagemath-db-graphs',
'gsl' : 'gsl',
'iconv' : 'libiconv',
'imagesize' : 'imagesize',
'iml':'iml',
'ipykernel' : 'ipykernel',
'ipython_genutils' : 'ipython_genutils',
'ipython' : 'ipython',
'ipywidgets' : 'ipywidgets',
'itsdangerous' : 'itsdangerous',
'jinja2' : 'jinja2',
'jsonschema' : 'jsonschema',
'jupyter_client' : 'jupyter_client',
'jupyter_core' : 'jupyter_core',
'lcalc':'lcalc',
'libfplll':'fplll',
'libgap':'libgap',
'libgd' : 'libgd',
'libpng' : 'libpng',
'linbox':'linbox',
'lrcalc':'lrcalc',
'm4rie':'m4rie',
'm4ri':'m4ri',
'markupsafe' : 'markupsafe',
'matplotlib' : 'matplotlib',
'maxima' : 'maxima',
'mistune' : 'mistune',
'mpc' : 'mpc',
'mpfi':'mpfi',
'mpfr' : 'mpfr',
'mpir' : 'gmp',
'mpmath' : 'mpmath',
'nauty' : 'nauty',
'nbconvert' : 'nbconvert',
'nbformat' : 'nbformat',
'ncurses' : 'ncurses',
'networkx' : 'networkx',
'notebook' : 'notebook',
'ntl':'ntl',
'numpy' : 'numpy=1.11',
'openblas' : 'openblas',
'palp':'palp',
'pari_galdata':'pari',
'pari':'pari',
'pari_seadata_small':'pari',
'pathlib2' : 'pathlib2',
'pathpy' : 'path.py',
'pexpect' : 'pexpect',
'pickleshare' : 'pickleshare',
'pillow' : 'pillow',
'pip' : 'pip',
'pkgconfig' : 'pkgconfig',
'planarity':'planarity',
'polytopes_db':'sagemath-db-polytopes',
'ppl':'ppl',
'prompt_toolkit' : 'prompt_toolkit',
'psutil' : 'psutil',
'ptyprocess' : 'ptyprocess',
'pycrypto' : 'pycrypto',
'pygments' : 'pygments',
'pynac':'pynac',
'pyparsing' : 'pyparsing',
'python2' : 'python=2.7',
'python3' : 'python=2.7',
'python_openid' : 'python-openid',
'pytz' : 'pytz',
'pyzmq' : 'pyzmq',
'r' : 'r-base',
'ratpoints':'ratpoints',
'readline' : 'readline',
'rubiks':'rubiks',
'rw':'rw',
'scipy' : 'scipy',
'setuptools_scm' : 'setuptools_scm',
'setuptools' : 'setuptools',
'simplegeneric' : 'simplegeneric',
'singledispatch' : 'singledispatch',
'singular':'singular',
'six' : 'six',
'snowballstemmer' : 'snowballstemmer',
'speaklater' : 'speaklater',
'sphinx' : 'sphinx',
'sqlite' : 'sqlite',
'symmetrica':'symmetrica',
'sympy' : 'sympy',
'terminado' : 'terminado',
'tornado' : 'tornado',
'traitlets' : 'traitlets',
'vcversioner' : 'vcversioner',
'wcwidth' : 'wcwidth',
'werkzeug' : 'werkzeug',
'widgetsnbextension' : 'widgetsnbextension',
'zeromq' : 'zeromq',
'zlib' : 'zlib',
'zn_poly': 'zn_poly',
}

if platform == "darwin":
    conda_pkgs["appnope"] = "appnope"

def main():
    pkg_dir="build/pkgs"
    dirs = sorted([d for d in os.listdir(pkg_dir) if os.path.isdir(os.path.join(pkg_dir, d))])
    for pkg in dirs:
        if not pkg in conda_pkgs:
            continue
        conda_file = os.path.join(pkg_dir, pkg, "conda-pkg-name")    
        with open(conda_file, 'w') as f:
            f.write(conda_pkgs[pkg])
    
    subprocess.call("mkdir -p %s" % sage_local, shell=True)
    subprocess.call("conda install %s -c conda-forge -p %s" % (' '.join(conda_pkgs.values()), sage_local), shell=True)

if __name__ == "__main__":
    main()

